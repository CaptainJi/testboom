# TestBoom项目规范与规划

## 项目目标
TestBoom是一个AI驱动的自动化测试项目,专注于以下三个核心目标:
1. AI分析产品PRD/需求文档图片,自动生成Excel格式的测试用例
2. AI阅读和理解已有的测试用例
3. AI执行测试用例并输出测试结果

## 项目架构
项目分为核心业务模块和支撑模块:

### 核心业务模块:

#### 1. 文档分析模块 (doc_analyzer)
- 功能: 多模态大模型(glm-4v-plus/glm-4v-flash)处理PRD/需求文档图片
- 职责:
  - 图片内容理解(包括多张图片关联预测)
  - 文本内容提取
  - 结构化信息识别
  - 业务逻辑理解
- 输出: 结构化的产品需求信息

#### 2. 用例处理模块 (case_processor)
- 功能: 生成和理解测试用例
- 职责:
  - 基于PRD分析结果生成用例
  - 读取和理解已有用例
  - 维护用例知识库
  - 用例优化和查重
- 输出: 标准格式的测试用例

#### 3. 用例执行模块 (case_executor)
- 功能: 执行测试用例
- 职责:
  - 解析测试步骤
  - 执行测试操作
  - 验证测试结果
  - 生成测试报告
- 输出: 测试执行结果和报告

### 核心支撑模块:

#### 1. AI核心模块 (ai_core)
- 功能: 提供AI能力支持
- 职责:
  - AI模型管理
  - 对话上下文管理
  - Prompt模板管理
  - 多轮对话管理
  - Agent管理
  - 结果解析处理

#### 2. 配置模块 (config)
- 功能: 管理系统配置
- 职责:
  - 环境变量管理
  - 配置文件加载
  - 参数验证
  - 敏感信息保护

#### 3. 日志模块 (logger)
- 功能: 系统日志管理
- 职责:
  - 日志记录
  - 日志分级
  - 日志格式化
  - 日志文件管理

## 开发规划
项目分三个阶段实现:

### 第一阶段: PRD分析和用例生成

#### 具体实施规划
1. 第一步: 项目基础搭建
   - 创建项目结构
   - 实现配置管理(主要是AI API配置)
   - 实现基础日志功能
   - 编写必要的工具函数

2. 第二步: AI核心功能
   - 封装智谱AI接口
   - 实现对话上下文管理
   - 设计prompt模板
   - 实现结果解析

3. 第三步: PRD分析功能
   - 实现图片处理
   - 实现文本内容提取
   - 实现需求理解和结构化

4. 第四步: 用例生成功能
   - 实现用例模板管理
   - 实现用例生成逻辑
   - 实现Excel格式输出

1. 项目初始化
   - 项目目录结构
   - 项目配置文件
   - 实现配置管理和日志管理模块
   - 测试验证（单元测试）
2. 实现AI核心模块
   - 模型管理
   - 对话上下文管理
   - Prompt模板管理
   - 多轮对话管理
   - Agent管理
   - 结果解析处理
   - 测试验证（单元测试）
2. 实现文档分析模块
   - 利用AI核心模块实现需求prd（包括多张图片）内容理解
   - 文本提取能力
   - 结构化信息识别
2. 实现用例生成功能
   - 用例模板定义
   - 用例生成逻辑
   - Excel格式输出

### 第二阶段: 用例理解
1. 实现用例读取功能
   - Excel文件解析
   - 用例结构识别
2. 实现用例理解功能
   - 测试步骤理解
   - 测试数据提取
   - 用例知识库构建

### 第三阶段: 用例执行
1. 实现用例执行功能
   - 执行环境准备
   - 测试步骤执行
   - 结果验证逻辑
2. 实现报告生成
   - 执行结果记录
   - 测试报告生成
   - 问题分析能力

## 技术栈
1. 核心技术:
   - 开发语言: Python 3.10+
   - AI模型: 智谱AI GLM-4
   - Agent框架: Langchain
   - 测试框架: Pytest
   - 日志框架: Loguru
   - 配置管理: Pydantic


2. 存储方案:
   - 文件系统: 存储图片、Excel等文件
   - SQLite: 轻量级数据存储(必要时使用)
   - 图数据库: Neo4j(必要时使用，如存储需求之间的关联、页面跳转关系、页面元素关系、页面元素与功能点关系等)

## 开发规范

### 代码规范
1. 遵循PEP 8规范
2. 使用类型注解
3. 编写详细的文档字符串
4. 代码提交前行lint检查

### 测试规范
1. 项目初期只验证核心功能，严格避免过度测试
2. 运行测试时必须使用 pytest -v-s 参数以显示测试细节

### 文档规范
1. 所有模块必须包含README
2. 核心函数必须有详细注释
3. 定期更新开发文档
4. 维护用户使用手册

### 版本控制
1. 使用Git进行版本控制
2. 遵循Git Flow工作流
3. 提交信息要清晰明确
4. 重要版本打Tag标记

### 工程管理规范
1. 路径检查:
   - 每次开发前检查工程目录结构
   - 确认功能的实现位置
   - 避免重复创建相似模块
   - 记录模块的依赖关系

2. 历史记录:
   - 维护模块开发日志
   - 记录问题解决方案
   - 保存关键设计决策
   - 定期回顾和整理

3. 代码复用:
   - 优先在工程内搜索类似功能
   - 评估已有代码的可复用性
   - 抽取通用功能到工具模块
   - 记录复用的注意事项

4. 问题追踪:
   - 建立问题解决记录
   - 分类整理常见问题
   - 维护最佳实践文档
   - 定期更新解决方案

## 项目结构
```
testboom/
├── src/
│   ├── doc_analyzer/     # 文档分析模块
│   ├── case_processor/   # 用例处理模块
│   ├── case_executor/    # 用例执行模块
│   ├── ai_core/         # AI核心模块
│   ├── config/          # 配置模块
│   ├── logger/          # 日志模块
│   └── utils/           # 通用工具
├── tests/               # 测试目录
|   ├── test_data/       # 用于测试的数据
├── docs/               # 文档目录
├── examples/           # 示例文件
├── logs                # 日志存储路径
└── resources/          # 资源文件
```

## 代码规则
1. 函数设计:
   - 单一职责原则
   - 参数类型注解
   - 返回值类型注解
   - 异常处理规范
   - 日志记录规范

2. 类设计:
   - 继承层次不超过2层
   - 优先使用组合而非继承
   - 实现必要的抽象接口
   - 提供完整的类文档



## 生成测试用例标题模板
   `|用例ID|所属模块|用例名称|用例等级|前置条件|测试步骤|预期结果|实际结果|测试状态|备注|`
   - 用例ID: 用例的唯一标识
   - 所属模块: 用例所属的模块
   - 用例名称: 用例的名称
   - 用例等级: 用例的等级（P0,P1,P2,P3）
   - 前置条件: 用例执行的前提条件
   - 测试步骤: 用例的执行步骤
   - 预期结果: 用例的预期结果
   - 实际结果: 用例的实际结果
   - 测试状态: 用例的测试状态
   - 备注: 用例的备注

2. 用例要求:
   - 步骤清晰可执行
   - 结果可验证
   - 覆盖主要场景
   - 包含异常处理


## 日志规范
1. 日志级别:
   - ERROR: 影响功能的错误
   - WARNING: 潜在问题警告
   - INFO: 关键步骤信息
   - DEBUG: 调试信息

2. 日志内容:
   - 时间戳
   - 日志级别
   - 模块名称
   - 具体信息
   - 相关上下文

## 文件命名规范
1. 源代码文件:
   - 小写字母
   - 下划线分隔
   - 有意义的名称
   - 避免test_前缀

2. 测试文件:
   - test_开头
   - 对应源文件名
   - 清晰表达测试内容

3. 资源文件:
   - 类型前缀
   - 版本信息
   - 日期信息
   - 清晰分类
   
## 开发经验总结
1. 优先级原则:
   - 核心功能优先,健壮性问题后置
   - 先实现基本流程,再考虑异常处理
   - 关注主要场景,边缘情况可以延后
2. 错误处理策略:
   - 避免过度设计错误处理
   - 只处理必要的错误场景
   - 保持错误处理逻辑简单
   - 不重复检查同一类错误
3. 测试策略:
   - 关注核心功能测试
   - 避免过度测试边缘情况
   - 测试代码力求简单直观
   - 避免复杂的测试场景设计
4. 代码组织:
   - 保持模块职责单一
   - 避免过度抽象和封装
   - 代码结构清晰易懂
   - 注释解释复杂逻辑
5. 开发流程:
   - 先搭建基础框架
   - 逐步完善核心功能
   - 及时重构优化代码
   - 持续集成和测试
6. 实践经验:
   - 避免过早优化和复杂化
   - 优先使用同步代码实现
   - 复用已有功能避免重复
   - 保持代码简单直观
   - 注重实际效果验证
   - 及时总结和改进
  
 ## 相关信息
  - LangChain ZHIPU AI 文档：https://python.langchain.com/docs/integrations/chat/zhipuai/
  - LangChain 文档：https://python.langchain.com/docs/