
  You are an expert in Python, FastAPI, microservices architecture, and serverless environments.
  
  Advanced Principles
  - Design services to be stateless; leverage external storage and caches (e.g., Redis) for state persistence.
  - Implement API gateways and reverse proxies (e.g., NGINX, Traefik) for handling traffic to microservices.
  - Use circuit breakers and retries for resilient service communication.
  - Favor serverless deployment for reduced infrastructure overhead in scalable environments.
  - Use asynchronous workers (e.g., Celery, RQ) for handling background tasks efficiently.
  
  Microservices and API Gateway Integration
  - Integrate FastAPI services with API Gateway solutions like Kong or AWS API Gateway.
  - Use API Gateway for rate limiting, request transformation, and security filtering.
  - Design APIs with clear separation of concerns to align with microservices principles.
  - Implement inter-service communication using message brokers (e.g., RabbitMQ, Kafka) for event-driven architectures.
  
  Serverless and Cloud-Native Patterns
  - Optimize FastAPI apps for serverless environments (e.g., AWS Lambda, Azure Functions) by minimizing cold start times.
  - Package FastAPI applications using lightweight containers or as a standalone binary for deployment in serverless setups.
  - Use managed services (e.g., AWS DynamoDB, Azure Cosmos DB) for scaling databases without operational overhead.
  - Implement automatic scaling with serverless functions to handle variable loads effectively.
  
  Advanced Middleware and Security
  - Implement custom middleware for detailed logging, tracing, and monitoring of API requests.
  - Use OpenTelemetry or similar libraries for distributed tracing in microservices architectures.
  - Apply security best practices: OAuth2 for secure API access, rate limiting, and DDoS protection.
  - Use security headers (e.g., CORS, CSP) and implement content validation using tools like OWASP Zap.
  
  Optimizing for Performance and Scalability
  - Leverage FastAPI’s async capabilities for handling large volumes of simultaneous connections efficiently.
  - Optimize backend services for high throughput and low latency; use databases optimized for read-heavy workloads (e.g., Elasticsearch).
  - Use caching layers (e.g., Redis, Memcached) to reduce load on primary databases and improve API response times.
  - Apply load balancing and service mesh technologies (e.g., Istio, Linkerd) for better service-to-service communication and fault tolerance.
  
  Monitoring and Logging
  - Use Prometheus and Grafana for monitoring FastAPI applications and setting up alerts.
  - Implement structured logging for better log analysis and observability.
  - Integrate with centralized logging systems (e.g., ELK Stack, AWS CloudWatch) for aggregated logging and monitoring.
  
  Key Conventions
  1. Follow microservices principles for building scalable and maintainable services.
  2. Optimize FastAPI applications for serverless and cloud-native deployments.
  3. Apply advanced security, monitoring, and optimization techniques to ensure robust, performant APIs.
  
  Refer to FastAPI, microservices, and serverless documentation for best practices and advanced usage patterns.

# TestBoom项目规范与规划

## 项目目标
TestBoom是一个AI驱动的自动化测试项目,专注于以下三个核心目标:
1. AI分析产品PRD/需求文档图片,自动生成Excel格式的测试用例
2. AI阅读和理解已有的测试用例
3. AI执行测试用例并输出测试结果

## 项目架构
项目分为核心业务模块和支撑模块:

### 核心业务模块:

#### 1. 文档分析模块 (doc_analyzer)
- 功能: 多模态大模型处理PRD/需求文档图片
- 职责:
  - 图片内容理解(包括多张图片关联预测)
  - 文本内容提取
  - 结构化信息识别
  - 业务逻辑理解
  - 文件处理(解压、分类、读取)
  - Excel格式输出
- 输出: 结构化的产品需求信息和测试用例

#### 2. AI核心模块 (ai_core)
- 功能: 提供AI能力支持
- 职责:
  - AI模型管理
  - 对话上下文管理
  - Prompt模板管理
  - 多轮对话管理
  - 用例生成和分析
  - 结果解析处理
- 组件:
  - chat_manager.py: 对话管理
  - prompt_template.py: 提示词模板
  - zhipu_api.py: 智谱AI接口

### 支撑模块:

#### 1. 配置模块 (config)
- 功能: 管理系统配置
- 职责:
  - 环境变量管理
  - 配置文件加载
  - 参数验证
  - 敏感信息保护
- 实现: settings.py (基于pydantic)

#### 2. 日志模块 (logger)
- 功能: 系统日志管理
- 职责:
  - 日志记录
  - 日志分级
  - 日志格式化
  - 日志文件管理
- 实现: logger.py (基于loguru)

#### 3. 工具模块 (utils)
- 功能: 提供通用工具函数
- 职责:
  - 文件操作
  - 目录管理
  - 类型转换
  - 异常处理
- 实现: common.py

### 存储方案:
1. 文件系统
   - 功能: 存储图片、Excel等文件
   - 路径:
     - resources/: 资源文件
     - output/: 输出文件
     - logs/: 日志文件

2. 规划中的存储方案:
   - SQLite: 轻量级数据存储
   - Neo4j: 图数据库(用于存储需求关联关��)

### 测试架构:
1. 测试模块
   - test_ai_core.py: AI核心测试
   - test_doc_analyzer.py: 文档分析测试
   - test_prompt_template.py: 模板测试
   - test_base.py: 基础功能测试

2. 测试数据
   - test_data/: 测试数据目录
   - test_prd.zip: 示例PRD文档

## 开发规划
项目分三个阶段实现:

### 第一阶段: PRD分析和用例生成
1. 项目基础搭建
   - 创建项目结构
   - 实现配置管理(主要是AI API配置)
   - 实现基础日志功能
   - 编写必要的工具函数

2. AI核心功能
   - 封装智谱AI接口
   - 实现对话上下文管理
   - 设计prompt模板
   - 实现结果解析

3. PRD分析功能
   - 实现图片处理
   - 实现文本内容提取
   - 实现需求理解和结构化

4. 用例生成功能
   - 实现用例模板管理
   - 实现用例生成逻辑
   - 实现Excel格式输出

### 第二阶段: 用例理解
1. 实现用例读取功能
   - Excel文件解析
   - 用例结构识别
2. 实现用例理解功能
   - 测试步骤理解
   - 测试数据提取
   - 用例知识库构建

### 第三阶段: 用例执行
1. 实现用例执行功能
   - 执行环境准备
   - 测试步骤执行
   - 结果验证逻辑
2. 实现报告生成
   - 执行结果记录
   - 测试报告生成
   - 问题分析能力

## 技术栈
1. 核心技术：
   - Python 3.10+
   - FastAPI 0.100+
   - SQLAlchemy 2.0+
   - Pydantic 2.0+
   - Loguru 0.7+
   - Pytest 7.0+
   - Langchain 0.1.0+
   - ZhipuAI SDK 1.0.0+

2. 存储方案：
   - SQLite: 轻量级数据存储
   - MinIO: 对象存储服务

3. 基础工具：
   - 日志记录
   - 错误追踪
   - 数据验证

## 开发规范

### 代码规范
1. 遵循PEP 8规范
2. 使用类型注解
3. 编写详细的文档字符串
4. 代码提交前行lint检查

### 测试规范
1. 项目初期只验证核心功能，严格避免过度测试
2. 运行测试时必须使用 pytest -v-s 参数以显示测试细节

### 文档规范
1. 所有模块必须包含README
2. 核心函数必须有详细注释
3. 定期更新开发文档
4. 维护用户使用手册

### 版本控制
1. 使用Git进行版本控制
2. 遵循Git Flow工作流
3. 提交信息要清晰明确
4. 重要版本打Tag标记

### 工程管理规范
1. 路径检查:
   - 每次开发前检查工程目录结构
   - 确认功能的实现位置
   - 避免重复创建相似模块
   - 记录模块的依赖关系

2. 历史记录:
   - 维护模块开发日志
   - 记录问题解决方案
   - 保存关键设计决策
   - 定期回顾和整理

3. 代码复用:
   - 优先在工程内搜索类似功能
   - 评估已有代码的可复用性
   - 抽取通用功能到工具模块
   - 记录复用的注意事项

4. 问题追踪:
   - 建立问题解决记录
   - 分类整理常见问题
   - 维护最佳实践文档
   - 定期更新解决方案

## 项目结构
```
testboom/
├── src/                 # 源代码
│   ├── doc_analyzer/    # 文档分析模块
│   │   ├── doc_analyzer.py    # 文档分析核心
│   │   └── file_processor.py  # 文件处理
│   ├── ai_core/         # AI核心模块
│   │   ├── chat_manager.py    # 对话管理
│   │   ├── prompt_template.py # 提示词模板
│   │   └── zhipu_api.py      # 智谱AI接口
│   ├── config/          # 配置模块
│   │   └── settings.py        # 配置管理
│   ├── logger/          # 日志模块
│   │   └── logger.py          # 日志配置
│   └── utils/           # 通用工具
│       └── common.py          # 工具函数
├── tests/               # 测试目录
│   ├── test_data/      # 测试数据
│   ├── test_ai_core.py       # AI核心测试
│   ├── test_base.py          # 基础功能测试
│   ├── test_doc_analyzer.py  # 文档分析测试
│   └── test_prompt_template.py # 模板测试
├── resources/          # 资源文件
│   └── prompts/        # 提示词模板
├── examples/           # 示例文件（待添加）
└── output/             # 输出目录
```

## 代码规则
1. 函数设计:
   - 单一职责原则
   - 参数注解
   - 返回值类型注解
   - 常处理规范
   - 日志记录规范

2. 类设计:
   - 继承层次不超过2层
   - 优先使用组合而非继承
   - 实现必要的抽象接口
   - 提供完整的类文档



## 生成测试用例标题模板
   `|用例ID|所属模块|用例名称|用例等级|前置条件|测试步骤|预期结果|实际结果|测试状态|备注|`
   - 用例ID: 用例的唯一标识
   - 所属模块: 用例所属的模块
   - 用例名称: 用例的名称
   - 用例等级: 用例的等级（P0,P1,P2,P3）
   - 前置条件: 用例执行的前提条件
   - 测试步骤: 用例的执行步骤
   - 预期结果: 用例的预期结果
   - 实际结果: 用例的实际结果
   - 测试状态: 用例的测试状态
   - 备注: 用例的备注

2. 用例要求:
   - 步骤清晰可执行
   - 结果可验证
   - 覆盖主要场景
   - 包含异常处理


## 日志规范
1. 日志级别:
   - ERROR: 影响功能的错误
   - WARNING: 潜在问题警告
   - INFO: 关键步骤信息
   - DEBUG: 调试信息

2. 日志内容:
   - 时间戳
   - 日志级别
   - 模块名称
   - 具体信息
   - 相关上下文

## 文件命名规范
1. 源代码文件:
   - 小写字母
   - 下划线分隔
   - 有意义的名称
   - 避免test_前缀

2. 测试文件:
   - test_开头
   - 对应源件名
   - 清晰达测试内容

3. 资源文件:
   - 类型前缀
   - 版本信息
   - 日期信息
   - 清晰分类
   
## 开发经验总结
1. 优先级原则:
   - 核心功能优先,健壮性问题置
   - 先实现基本流程,再考虑异常处理
   - 关注主要场景,边缘情况可以延后
2. 错误处理策略:
   - 避免过度设计错误处理
   - 只处理必要的错误场景
   - 保持错误处理逻辑简单
   - 不重复检查同一类错误
3. 测试策略:
   - 关注核心功能测试
   - 避免过度测试边缘情况
   - 测试代码力求简单直观
   - 避免复杂的测试场景设计
4. 代码组织:
   - 保持模块职责单一
   - 避免过度抽象和封装
   - 代码结构清晰易懂
   - 注释解释复杂逻辑
5. 开发流程:
   - 先搭建基础框架
   - 逐步完善核心功能
   - 及时重构优化代码
   - 持续集成和测试
6. 实践经验:
   - 避免过早优化和复杂化
   - 优先使用同步代码实现
   - 复用已有功能避免重复
   - 保持代码简单直观
   - 注重实际效果验证
   - 及时总结和改进
  
 ## 相关信息
  - LangChain ZHIPU AI 文档：https://python.langchain.com/docs/integrations/chat/zhipuai/
  - LangChain 文档：https://python.langchain.com/docs/


## 功能模块备忘录

### 已完成功能
   - [x] 基础框架搭建
   - [x] AI核心模块开发
   - [x] 文档分析模块开发
   - [x] 用例生成功能
   - [x] API接口开发
   - [x] 环境配置完善
   - [x] 对象存储集成
   - [x] 多模态模型支持
   - [x] 任务管理系统
   - [x] 数据库重构
   - [ ] 用例执行功能
   - [ ] 自动化测试
   - [ ] 部署文档

### 下一步计划
   - 完善用例生成功能
   - 实现用例执行引擎
   - 开发基础自动化测试
   - 优化任务管理系统
   - 完善错误处理机制
   - 补充核心功能测试

### 最近更新
1. 任务管理系统优化：
   - 实现了基于事件的任务调度
   - 添加了任务状态原子更新
   - 优化了并发处理机制
   - 改进了错误处理流程

2. 数据库架构升级：
   - 简化了数据库模型结构
   - 优化了查询性能
   - 添加了数据库连接池
   - 完善了数据迁移方案

3. 系统功能增强：
   - 添加了详细的日志记录
   - 完善了错误追踪
   - 改进了数据处理
   - 优化了功能流程

4. 代码质量改进：
   - 完善了类型注解
   - 优化了代码结构
   - 增加了单元测试
   - 改进了文档质量

## 待优化项
1. 核心功能完善：
   - [ ] 优化用例生成质量
   - [ ] 实现用例执行引擎
   - [ ] 实现基础自动化测试
   - [ ] 添加测试报告生成

2. 功能稳定性：
   - [ ] 完善错误处理
   - [ ] 优化异常恢复
   - [ ] 加强数据验证
   - [ ] 改进日志记录

3. 功能扩展：
   - [ ] 支持更多测试类型
   - [ ] 优化测试报告格式
   - [ ] 添加用例管理功能
   - [ ] 完善配置项管理

### 开发优先级
1. P0 - 当前阶段（1-2周）
   - 完善用例生成功能
   - 开发用例执行引擎
   - 实现基础自动化测试

2. P1 - 近期目标（2-4周）
   - 优化任务管理系统
   - 完善错误处理机制
   - 改进功能稳定性

3. P2 - 中期目标（1-2月）
   - 添加更多测试类型
   - 优化测试报告功能
   - 完善用例管理

4. P3 - 远期规划（2-3月）
   - 补充项目文档
   - 添加使用示例
   - 优化用户体验

## 改动记录

### 2024-12-12
1. 代码结构优化：
   - 用例处理(case_processor)和执行(case_executor)功能目前在ChatManager中实现
   - 基于AI能力的实现，暂不需要迁移到独立模块
   - 后续添加自动化执行等功能时再考虑迁移

2. 目录调整
   - 删除docs目录，使用README.md作为主要文档
   - 保留examples目录，项目完成后添加示例
   - 更新项目结构，反映当前实际的文件组织
   - 移除未使用的目录，添加新的输出目录

3. 文档完善：
   - 补充了ChatManager类的详细文档字符串
   - 补充了所有方法的详细文档字符串
   - 优化了代码结构和错误处理

### 2024-12-13
1. 数据库重构
   - 删除复杂的数据库迁移方案
   - 重新创建数据库,使用新的模型结构
   - TestCase模型添加独立的project字段

2. 查询优化
   - 修改CaseService.list_cases方法
   - 使用TestCase.project字段直接查询
   - 移除content字段中的JSON查询

3. Excel导出功能完善
   - 完善DocAnalyzer._export_testcases_to_excel方法
   - 添加output_path参数支持自定义导出路径
   - 使用pandas和openpyxl实现Excel导出
   - 优化数据格式转换和错误处理

### 2024-12-14
1. 环境变量配置完善：
   - 创建了完整的 .env.example 文件
   - 规范化了配置项分类和命名
   - 添加了详细的配置说明
   - 更新了智谱AI模型配置

2. 配置项更新：
   - AI配置：
     - 更新模型名称为 glm-4-flash 和 glm-4v-flash
     - 添加了完整的重试策略配置
     - 规范化了API密钥配置
   - 日志配置：
     - 完善了日志格式配置
     - 添加了日志轮转和保留策略
   - 数据库配置：
     - 添加了连接池配置
     - 规范化了数据库URL配置

3. 任务管理优化：
   - 后台任务处理：
     - 实现了独立的事件循环和后台线程
     - 使用 Event 机制替代轮询等待
     - 优化了任务状态更新机制
     - 改进了错误处理和日志记录
   - 代码结构优化：
     - 移除了未使用的线程池
     - 实现了原子化的状态更新
     - 添加了详细的类型注解和文档
     - 改进了数据处理的安全性
   - 性能改进：
     - 避免了主事件循环阻塞
     - 优化了任务执行效率
     - 改进了并发处理能力
     - 增强了系统稳定性

4. 代码质量提升：
   - 文档完善：
     - 添加了详细的类和方法文档
     - 规范化了参数和返回值说明
     - 补充了错误处理文档
   - 代码规范：
     - 遵循单一职责原则
     - 改进了代码可读性
     - 优化了异常处理流程
     - 增强了代码可维护性

## 待优化项
1. 任务管理：
   - [ ] 添加任务超时机制
   - [ ] 实现任务优先级队列
   - [ ] 添加任务重试机制
   - [ ] 实现任务依赖关系

2. 性能优化：
   - [ ] 添加任务执行性能监控
   - [ ] 优化内存使用
   - [ ] 实现任务负载均衡
   - [ ] 添加资源使用限制

3. 可靠性提升：
   - [ ] 添加健康检查机制
   - [ ] 实现故障恢复
   - [ ] 添加监控告警
   - [ ] 完善日志追踪